@model WebApplication1.user
<div class="row">
    <div class="col-sm-6">

        <div class="form-group">
            <label>user Name</label>

            @Html.TextBoxFor(x => x.username, new {@class = "form-control"})

        </div>
        <div class="form-group">
            <label>Email</label>

            @Html.TextBoxFor(x => x.email, new { @class = "form-control" })

        </div>
        <div class="form-group">
            <label>Password</label>

            <input type="password" name="txtPass" class="form-control" id="txtPass"/>
        </div>
        <div class="form-group">
            <label>Status</label>


            @Html.DropDownListFor(c => c.status, new List<SelectListItem> { new SelectListItem { Text = "True", Value = "1" }, new SelectListItem { Text = "False", Value = "0", Selected = true } }, new { @class = "form-control select2" })


        </div>

    </div>
    <div class="col-sm-6">
        <div class="form-group">
            <label>Display Name</label>


            @Html.TextBoxFor(x => x.display, new { @class = "form-control" })
        </div>
        <div class="form-group">
            <label>Confirm Password</label>

            @Html.TextBoxFor(x => x.password, new { @class = "form-control" })
        </div>
        @if (ViewBag.Role == 5)
        {
            <div class="form-group">
                <label>User Type :</label>
              
                    @Html.DropDownListFor(c => c.type, new List<SelectListItem> {
                   new SelectListItem { Text = "None", Value = "1" },
                   new SelectListItem { Text = "Basic", Value = "2" },
                   new SelectListItem { Text = "Vip", Value = "3" },
                   new SelectListItem { Text = "Primeum", Value = "4"} }, new { @class = "form-control" })

               
            </div>
            <div class="form-group" style="display:none">
                <label>Discount :</label>
               
                    @Html.TextBoxFor(model => model.discount, new { @type = "number", @class = "form-control", @min = "0", @max = "100" })
                    @Html.ValidationMessageFor(model => model.discount)
           
            </div>
            <div class="form-group">
                <label>Total Paid Order :</label>
               
                    @Html.TextBoxFor(model => model.paidorder, new { @type = "number", @class = "form-control", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.paidorder)
                
            </div>
            <script type="text/javascript">
                if (document.getElementById('type').value == "1") {
                    document.getElementById('discount').setAttribute("readonly", "readonly");
                    document.getElementById('discount').value = "0";
                }
                document.getElementById('type').onchange = function () {
                    if (document.getElementById('type').value == "1") {
                        document.getElementById('discount').setAttribute("readonly", "readonly");
                        document.getElementById('discount').value = "0";
                    } else
                        document.getElementById('discount').removeAttribute("readonly");
                }
            </script>
        }
    </div>
</div>


@Html.HiddenFor(x => x.Id)

<script>

    $('#validation-form').validate({
        errorElement: 'div',
        errorClass: 'help-block',
        focusInvalid: false,
        ignore: "",
        rules: {
            username: {
                required: true
            },
            display: {
                required: true

            },

            txtPass: {
                required: true

            },
            password: {
                required: true,
                equalTo: "#txtPass"
            }
        },

        messages: {
            username: "User Name do not empty",
            display: "Display Name do not empty",
            txtPass: "Password do not empty",
            password: "Password Confirm do not empty"


        },
        highlight: function (e) {

            if ($(e).is('.file-upload')) {
                $(e).parents('div').eq(1).find('.form-group').removeClass('has-info').addClass('has-error');
            } else {
                $(e).closest('.form-group').removeClass('has-info').addClass('has-error');
            }


        },

        success: function (e) {
            if ($(e).is('.file-upload')) {
                $(e).parents('div').eq(1).find('.form-group').removeClass('has-error').addClass('has-info');
                $(e).parents('div').eq(1).find('.form-group .help-block').remove();
            }
            else {
                $(e).closest('.form-group').removeClass('has-error').addClass('has-info');
                $(e).closest('.form-group').find('.help-block').remove();
            }

        },

        errorPlacement: function (error, element) {

            if (element.is('input[type=checkbox]') || element.is('input[type=radio]')) {
                var controls = element.closest('div[class*="col-"]');
                if (controls.find(':checkbox,:radio').length > 1) controls.append(error);
                else error.insertAfter(element.nextAll('.lbl:eq(0)').eq(0));
            }
            else if (element.is('.select2') || element.is('.js-select2-1')) {
                if (element.parents('div').eq(0).is('.input-group')) {
                    error.insertAfter(element.parents('div').eq(0));
                } else {
                    error.insertAfter(element.siblings('[class*="select2-container"]:eq(0)'));
                }


            }
            else if (element.is('.file-upload')) {
                error.insertAfter(element.parents('div').eq(1).find('.file-caption-main'));
            }
            else if (element.is('.chosen-select')) {
                error.insertAfter(element.siblings('[class*="chosen-container"]:eq(0)'));
            }
            else error.insertAfter(element);
        },

        submitHandler: function (form) {
        },
        invalidHandler: function (form) {
        }
    });


</script>