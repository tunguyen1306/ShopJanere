@using System.Configuration
@using WebApplication1.Models
@model WebApplication1.order
@{
    veebdbEntities db = new veebdbEntities();
}

<div class="row">
    <div class="col-sm-4">

        <div class="row">
            <div class="col-md-12">
                <label>General</label>
            </div>

        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <label>Date</label>
                    <div class="row">
                        <div class="col-lg-12">

                            @if (Model.ocid > 0)
                            {
                                <input disabled="disabled" class="form-control" value="@Model.submitDate.Value.ToShortDateString()" style="float: left; width: 100px;" />
                                <div style="float: left; width: 10px; margin-left: 5px; margin-right: 5px;">@("@")</div>
                                <input disabled="disabled" class="form-control" value="@Model.submitDate.Value.Hour" style="float: left; width: 43px; margin-left: 2px; margin-right: 2px;" />
                                <div style="float: left; width: 10px; margin-left: 5px; margin-right: 5px;">:</div>
                                <input disabled="disabled" class="form-control" value="@Model.submitDate.Value.Minute" style="float: left; width: 43px; margin-left: 2px; margin-right: 2px;" />
                            }
                            else
                            {
                                <input disabled="disabled" class="form-control" value="@ViewBag.DateOrder" style="float: left; width: 100px;" />
                                <div style="float: left; width: 10px; margin-left: 5px; margin-right: 5px;">@("@")</div>
                                <input disabled="disabled" class="form-control" value="@ViewBag.HourOrder" style="float: left; width: 43px; margin-left: 2px; margin-right: 2px;" />
                                <div style="float: left; width: 10px; margin-left: 5px; margin-right: 5px;">:</div>
                                <input disabled="disabled" class="form-control" value="@ViewBag.MuniteOrder" style="float: left; width: 43px; margin-left: 2px; margin-right: 2px;" />
                            }


                        </div>

                    </div>

                </div>
                <div class="form-group">
                    <label>Status</label>
                    @Html.DropDownListFor(c => c.status, new List<SelectListItem> { new SelectListItem { Text = "True", Value = "1" }, new SelectListItem { Text = "False", Value = "0", Selected = true } }, new { @class = "form-control select2" })


                </div>
                <div class="form-group">
                    <label>Clients</label>
                    @Html.TextBoxFor(x => x.clientID, new { @class = "form-control" })


                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-4">

        <div class="row">
            <div class="col-md-12">
                <label>Payment Detail</label>
            </div>

        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    <label>First Name</label>
                    @Html.TextBoxFor(x => x.b_fname, new { @class = "form-control" })

                </div>

            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <label>Last Name</label>
                    @Html.TextBoxFor(x => x.b_lname, new { @class = "form-control" })

                </div>

            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <label>Company</label>
                    @Html.TextBoxFor(x => x.b_companyname, new { @class = "form-control" })

                </div>

            </div>

        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <label>Address</label>
                    @Html.TextBoxFor(x => x.b_addr1, new { @class = "form-control" })
                    <br />
                    @Html.TextBoxFor(x => x.b_addr2, new { @class = "form-control" })

                </div>

            </div>

        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    <label>City</label>
                    @Html.TextBoxFor(x => x.b_addr3, new { @class = "form-control" })

                </div>

            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <label>Post Code</label>
                    @Html.TextBoxFor(x => x.b_postcode, new { @class = "form-control" })

                </div>

            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    <label>Country</label>
                    @Html.TextBoxFor(x => x.b_country, new { @class = "form-control" })

                </div>

            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <label>District</label>
                    @Html.TextBoxFor(x => x.b_country, new { @class = "form-control" })

                </div>

            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <label>Email</label>
                    @Html.TextBoxFor(x => x.b_email, new { @class = "form-control" })


                </div>

            </div>

        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <label>Phone</label>
                    @Html.TextBoxFor(x => x.b_phone, new { @class = "form-control" })


                </div>

            </div>

        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <label>Payment method</label>
                    @Html.DropDownListFor(c => c.status, new List<SelectListItem> { new SelectListItem { Text = "True", Value = "1" }, new SelectListItem { Text = "False", Value = "0", Selected = true } }, new { @class = "form-control select2" })


                </div>

            </div>

        </div>
    </div>
    <div class="col-sm-4">

        <div class="row">
            <div class="col-md-12">
                <label>Delivery Detail</label>
            </div>

        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    <label>First Name</label>
                    @Html.TextBoxFor(x => x.d_fname, new { @class = "form-control" })

                </div>

            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <label>Last Name</label>
                    @Html.TextBoxFor(x => x.d_lname, new { @class = "form-control" })

                </div>

            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <label>Company</label>
                    @Html.TextBoxFor(x => x.d_companyname, new { @class = "form-control" })

                </div>

            </div>

        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <label>Address</label>
                    @Html.TextBoxFor(x => x.d_addr1, new { @class = "form-control" })
                    <br />
                    @Html.TextBoxFor(x => x.d_addr2, new { @class = "form-control" })

                </div>

            </div>

        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    <label>City</label>
                    @Html.TextBoxFor(x => x.d_addr3, new { @class = "form-control" })

                </div>

            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <label>Post Code</label>
                    @Html.TextBoxFor(x => x.d_postcode, new { @class = "form-control" })

                </div>

            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    <label>Country</label>
                    @Html.TextBoxFor(x => x.d_country, new { @class = "form-control" })

                </div>

            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <label>District</label>
                    @Html.TextBoxFor(x => x.d_country, new { @class = "form-control" })

                </div>

            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <label>Email</label>
                    @Html.TextBoxFor(x => x.d_email, new { @class = "form-control" })


                </div>

            </div>

        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <label>Phone</label>
                    @Html.TextBoxFor(x => x.d_phone, new { @class = "form-control" })


                </div>

            </div>

        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <label>Notes</label>

                    @Html.TextAreaFor(x => x.d_notes, new { @class = "form-control", @placeholder = "Type your note hre" })
                </div>

            </div>

        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-12 table-responsive">
        <table class="table list_product">
            <thead>
                <tr>
                    <th id="cb" class="manage_column column_check"><input id="cb_select_all" type="checkbox"></th>

                    <th scope="col" id="barcode" class="manage_column column_barcode">Order</th>
                    <th scope="col" class="manage_column column_number">Amount</th>
                    <th scope="col" id="product_name" class="manage_column column_product_name">Metagroup</th>
                    <th scope="col" id="description" class="manage_column column_description">Item Description</th>
                    @*
                        <th scope="col" id="category" class="manage_column column_category">Notes</th>*@

                    <th scope="col" class="manage_column column_action">Action</th>
                </tr>
            </thead>
            @if (Model.ocid > 0)
            {
                <tbody class="addRowParent">
                    @foreach (var item in (List
            <AllModel>
                )ViewBag.ListOderDetail)
                    {
                        var tblItem = db.items.FirstOrDefault(x => x.ARTNO == item.tblOrderDetail.itemId);

                       

                        <tr rel="@(item.tblOrderDetail.itemId)" class="tr_@(item.tblOrderDetail.itemId)">
                            <td class="hiddeTd">
                                <input type="checkbox" id="cb_@(item.tblOrderDetail.prodetailid)" value="@(item.tblOrderDetail.prodetailid)">
                            </td>
                            <td>
                                <input type="hidden" name="IdProduct" value="@(item.tblOrderDetail.itemId)" />
                                <input type="hidden" class="TotalIdProduct_@(item.tblOrderDetail.itemId)" name="totalProduct" value="@(item.tblOrderDetail.itemId + "_" + item.tblOrderDetail.ocdetailqty)">
                                @(tblItem != null ? tblItem.ARTNAME : "")
                            </td>
                            <td class="hiddetxt hidden"><input rel="@(item.tblOrderDetail.itemId)" id="amount_@(item.tblOrderDetail.itemId)" type="number" min="1"  value="@(item.tblOrderDetail.ocdetailqty)" class="form-control amount"></td>
                            <td class="hiddeTd tdQuatity_@(item.tblOrderDetail.itemId)" name="quantityProduct">@(item.tblOrderDetail.ocdetailqty)</td>
                            <td class="hiddeTd">@(tblItem != null ? db.artgrps.FirstOrDefault(x => x.GROUPNO == tblItem.GROUPNO) != null ? db.artgrps.FirstOrDefault(x => x.GROUPNO == tblItem.GROUPNO).GROUPNAME : "" : "")</td>
                            <td class="hiddeTd">@(tblItem != null ? tblItem.INFO : "")</td>
                            <td class="hiddeTd">
                                <a class="edit_action" data-toggle="modal" data-target="#myModal"><i class="fas fa-edit"></i></a>
                                <a class="delete_action" onclick="return confirm('Are you want delete ?')" href="@Url.Action("DeleteOrderDetail","Order",new {id=item.tblOrderDetail.prodetailid})"><i class="fas fa-times"></i></a>
                            </td>
                        </tr>
                    }
                </tbody>
            }
            else
            {
                <tbody class="addRowParent">
                   
                </tbody>
            }


        </table>


    </div>

</div>




<!-- Modal -->
<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Add Items</h4>
            </div>
            <div class="modal-body">
                <table class="table list_product">
                    <thead>
                        <tr>
                            <th id="cb" class="manage_column column_check">Product</th>

                            <th scope="col" id="barcode" class="manage_column column_barcode">Amount</th>

                        </tr>
                    </thead>
                    @if (Model.ocid > 0)
                    {
                        <tbody class="addRow">
                            @foreach (var item in (List<AllModel>)ViewBag.ListOderDetail)
                            {
                                var tblItem = db.items.FirstOrDefault(x => x.ARTNO == item.tblOrderDetail.itemId);


                     
                                <tr rel="@(item.tblOrderDetail.itemId)" class="tr_@(item.tblOrderDetail.itemId)">
                                    <td class="hiddeTd hidden">
                                        <input type="checkbox" id="cb_@(item.tblOrderDetail.prodetailid)" value="@(item.tblOrderDetail.prodetailid)">
                                    </td>
                                    <td>
                                        <input type="hidden" name="IdProduct" value="@(item.tblOrderDetail.itemId)" />
                                        <input type="hidden" class="TotalIdProduct_@(item.tblOrderDetail.itemId)" name="totalProduct" value="@(item.tblOrderDetail.itemId + "_" + item.tblOrderDetail.ocdetailqty)">
                                        @(tblItem != null ? tblItem.ARTNAME : "")
                                    </td>
                                    <td class="hiddetxt"><input rel="@(item.tblOrderDetail.itemId)" id="amount_@(item.tblOrderDetail.itemId)" type="number" min="1"  value="@(item.tblOrderDetail.ocdetailqty)" class="form-control amount"></td>
                                    <td class="hiddeTd hidden tdQuatity_@(item.tblOrderDetail.itemId)" name="quantityProduct">@(item.tblOrderDetail.ocdetailqty)</td>
                                    <td class="hiddeTd hidden">@(tblItem != null ? db.artgrps.FirstOrDefault(x => x.GROUPNO == tblItem.GROUPNO) != null ? db.artgrps.FirstOrDefault(x => x.GROUPNO == tblItem.GROUPNO).GROUPNAME : "" : "")</td>
                                    <td class="hiddeTd hidden">@(tblItem != null ? tblItem.INFO : "")</td>
                                    <td class="hiddeTd hidden">
                                        <a class="edit_action" data-toggle="modal" data-target="#myModal"><i class="fas fa-edit"></i></a>
                                        <a class="delete_action" onclick="return confirm('Are you want delete ?')" href="@Url.Action("DeleteOrderDetail","Order",new {id=item.tblOrderDetail.prodetailid})"><i class="fas fa-times"></i></a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    }
                    else
                    {
                        <tbody class="addRow"> </tbody>
                    }

<tfoot>
                        <tr>
                            <td><input type="text" name="country" id="_pBoxSearch_title" class="form-control" /></td>
                            <td><input type="number" id="txtAmountPa" name="country" value="1" min="1" class="form-control" /></td>

                        </tr>
                    </tfoot>
                </table>


            </div>
            <div class="modal-footer">
                <div class="page_action">
                    <a class="btnAddOnTable">Add</a>
                </div>

            </div>
        </div>

    </div>
</div>

<script type="text/javascript">

    function typeAH(elid, url) {


        var timeout = null;
        $("#" + elid).typeahead({
            hint: false,
            highlight: true,
            autoSelect: false,
            selectOnBlur: false,
            changeInputOnMove: false,
            changeInputOnSelect: false,
            select: function () {
                console.log("select");
                var a = this.$menu.find(".active").data("value");
                if (this.$element.data("active", a), this.autoSelect || a) {
                    var b = this.updater(a);
                    b || (b = ""), this.$element.val(this.displayText(b) || b).text(this.displayText(b) || b).change(), this.afterSelect(b), this.followLinkOnSelect && this.itemLink(a) ? (document.location = this.itemLink(a), this.afterSelect(b)) : this.followLinkOnSelect && !this.itemLink(a) ? this.afterEmptySelect(b) : this.afterSelect(b)
                } else this.afterEmptySelect(b);



                var rowTbale = "";
                rowTbale += "<tr rel='" + map[b].id + "' class='tr_" + map[b].id + "'>" +
                    "<td class=\"hiddeTd hidden\"><input  type=\"checkbox\" id=\"cb_" + map[b].id + "\" value=\"" + map[b].id + "\"/></td>" +
                    "<td><input type=\"hidden\"  name=\"IdProduct\" value=\"" + map[b].id + "\" /><input type=\"hidden\" class=\"TotalIdProduct_" + map[b].id + "\" name=\"totalProduct\" value=\"" + map[b].id + "\" />" + map[b].name + "</td>" +
                    "<td class=\"hiddetxt\"><input rel=\"" + map[b].id + "\" id='amount_" + map[b].id + "' type='number' min=\"1\"  value='0' class='form-control amount' /></td>" +
                    "<td class=\"hiddeTd hidden tdQuatity_" + map[b].id + "\"  ></td>" +
                    "<td class=\"hiddeTd hidden\">" + map[b].grp + "</td>" +
                    "<td class=\"hiddeTd hidden\">" + map[b].des + "</td>" +
                    "<td class=\"hiddeTd hidden\"> <a data-toggle=\"modal\" data-target=\"#myModal\"><i class=\"fas fa-edit\"></i></a> <a class=\"delete_action btnDelete\" rel=\"" + map[b].id +"\"><i class=\"fas fa-times\"></i></a></td>" +
                    "</tr>";

                var check = $('.addRow').find('input[name="IdProduct"][value="' + map[b].id + '"]');
                if (check.length == 0) {
                    $('.addRow').append(rowTbale);
                    var total1 = parseInt($('#amount_' + map[b].id).val()) + parseInt($('#txtAmountPa').val());
                    $('#amount_' + map[b].id).val(total1);
                    $('#txtAmountPa').val("1");
                    console.log(total1);
                    $('.tdQuatity_' + map[b].id).html(total1);
                    $('.addRow').find('.hiddeTd').addClass('hidden');

                    $('.TotalIdProduct_' + map[b].id).val(map[b].id + "_" + total1);

                } else {
                    var total = $('#amount_' + map[b].id).val();

                    $('#amount_' + map[b].id).val(parseInt(total) + 1);
                    $('.tdQuatity_' + map[b].id).html(parseInt(total) + 1);
                    $('.TotalIdProduct_' + map[b].id).val(map[b].id + "_" + (parseInt(total) + 1));
                }
                $('#amount_' + map[b].id).on('change', function () {
                    console.log("1"+$(this).val());
                    $('.tdQuatity_' + map[b].id).html($(this).val());
                    $('.amount_' + ($(this).attr('rel'))).val($(this).val());
                    $('.amount_' + ($(this).attr('rel'))).attr('value', $(this).val());
                    $('.TotalIdProduct_' + map[b].id).val(map[b].id + "_" + $(this).val());
                });
               

                $('#_pBoxSearch_title').val('');

                return this.hide();
            },
            click: function (a) {
                console.log("click");
                a.preventDefault(), this.skipShowHintOnFocus = !0, this.select(), this.$element.focus(), this.hide();
            },
            mouseenter: function (b) {
                console.log("mouseenter");
                this.mousedover = !0, this.$menu.find(".active").removeClass("active"), a(b.currentTarget).addClass("active");
            },
            mouseleave: function (a) {
                console.log("mouseleave");
                this.mousedover = !1, !this.focused && this.shown && this.hide();
            },
            mousedown: function (a) {
                console.log("mousedown");
                this.mouseddown = !0, this.$menu.one("mouseup", function (a) {
                    this.mouseddown = !1;
                }.bind(this));
            },
            touchstart: function (b) {
                b.preventDefault(), this.$menu.find(".active").removeClass("active"), a(b.currentTarget).addClass("active");
            },
            touchend: function (a) {
                a.preventDefault(), this.select(), this.$element.focus();
            },
            move: function (a) {
                console.log("move");
                if (this.shown) switch (a.keyCode) {
                    case 9:
                    case 13:
                    case 27:
                        a.preventDefault();
                        break;
                    case 38:
                        if (a.shiftKey) return;
                        a.preventDefault(), this.prev();
                        break;
                    case 40:
                        if (a.shiftKey) return;
                        a.preventDefault(), this.next();
                }
            },
            display: 'value',
            minLength: 2,
            mousedover: false,
            highlighter: function (item, value) {
                var q = this.query.toLowerCase();
                var hl = item.toLowerCase().replace(new RegExp('(' + q + ')', 'ig'),
                    function ($1, match) {
                        return '<strong>' + match + '</strong>';
                    });
                var item2 = value;
                var bb = 0;
                while (hl.indexOf("<strong>", bb) !== -1) {
                    var begin = hl.indexOf("<strong>", bb);
                    item2 = item2.substr(0, begin) + '<strong>' + item2.substr(begin, q.length) + '</strong>' + item2.substr(begin + q.length);
                    bb = hl.indexOf("</strong>", bb) + "</strong>".length;
                }
                return item2;
            }, matcher: function (item) {
                var dd = ~item.toLowerCase().indexOf(this.query.toLowerCase());

                return dd;
            }
            , render: function (items) {
                var that = this;

                items = $(items).map(function (i, item) {
                    i = $(that.options.item).attr('data-value', JSON.stringify(item));
                    var value = item;
                    var id = item;
                    i.find('a').html(that.highlighter(id, value));
                    return i[0];
                });

                // items.first().addClass('active');
                this.$menu.html(items);
                return this;
            },

            source: function (request, response) {


                if (timeout == null) {
                    timeout = setTimeout(function () {
                        $.ajax({
                            url: url,
                            data: "{ 'query': '" + request + "'}",
                            dataType: "json",
                            type: "POST",
                            global: false,
                            contentType: "application/json; charset=utf-8",
                            success: function (data) {
                                items = [];
                                map = {};
                                $.each(data.data, function (i, item) {
                                    var id = item.value;
                                    var name = item.label;
                                    var des = item.des;
                                    var grp = item.grp;

                                    map[name] = { id: id, name: name, des: des, grp: grp };
                                    items.push(name);
                                });
                                response(items);
                                $('#' + elid).parents('div').eq(0).find(".dropdown-menu").css("height", "auto");
                            },
                            error: function (response) {
                                //alert(response.responseText);
                            },
                            failure: function (response) {
                                //  alert(response.responseText);
                            }
                        });
                    }, 300);
                } else {
                    clearTimeout(timeout);
                    timeout = setTimeout(function () {
                        $.ajax({
                            url: url,
                            data: "{ 'query': '" + request + "'}",
                            dataType: "json",
                            type: "POST",
                            global: false,
                            contentType: "application/json; charset=utf-8",
                            success: function (data) {
                                items = [];
                                map = {};
                                $.each(data.data, function (i, item) {
                                    var id = item.value;
                                    var name = item.label;
                                    var des = item.des;
                                    var grp = item.grp;

                                    map[name] = { id: id, name: name, des: des, grp: grp };
                                    items.push(name);
                                });
                                response(items);
                                $('#' + elid).parents('div').eq(0).find(".dropdown-menu").css("height", "auto");
                            },
                            error: function (response) {
                                //alert(response.responseText);
                            },
                            failure: function (response) {
                                //  alert(response.responseText);
                            }
                        });
                    }, 300);
                }


            },
            afterEmptySelect: function (val) {
                this.hide();
                console.log("===>");
                //$('form#form-search').submit();
            },

            afterSelect: function (val) {
                console.log("===>");
                // window.location = "/admin/" + map[val].link + "/Details/" + map[val].id;
            },
            updater: function (item) {
                /// $('#_pBoxSearch_title').val(item.substr(1, item.length - 2));
                console.log("===>");
                return item.substr(1, item.length - 2);
            }
        });
    }

    typeAH("_pBoxSearch_title", '@Url.Action("_AjaxAutoComplete","Order")');
    $('.btnAddOnTable').on('click', function () {
        addOnTable();
    });
    $('.amount').on('change', function () {
        console.log("2_" + $(this).attr('rel') + "_" + $(this).val());
        var ttt = $(this).val();
        $('.tdQuatity_' + ($(this).attr('rel'))).html(ttt);
        $('.amount_' + ($(this).attr('rel'))).val(ttt);
        $('.amount_' + ($(this).attr('rel'))).attr('value', ttt);
        $('.TotalIdProduct_' + $(this).attr('rel')).val($(this).attr('rel') + "_" + $(this).val());
    });

    function addOnTable() {

        $('.addRowParent').html('');
        $('.addRowParent').html($('.addRow').html());
        $('.addRowParent').find('.hiddeTd').removeClass('hidden');
        $('.addRowParent').find('.hiddetxt').addClass('hidden');

        $('#myModal').modal('toggle');
        $('.amount').attr('value', 1);
        $('.btnDelete').on('click', function () {
          
            $('.tr_' + $(this).attr('rel')).remove();
        });
    }

</script>
@Html.HiddenFor(x => x.ocid)
<script>
    $('#validation-form').validate({
        errorElement: 'div',
        errorClass: 'help-block',
        focusInvalid: false,
        ignore: "",
        rules: {
            d_fname: { required: true },
            d_lname: { required: true },
            b_fname: { required: true },
            b_lname: { required: true }



        },

        messages: {
            d_fname: "First Name do not empty",
            d_lname: "Last Name do not empty",
            b_fname: "First Name do not empty",
            b_lname: "Last Name do not empty"
        },


        highlight: function (e) {

            if ($(e).is('.file-upload')) {
                $(e).parents('div').eq(1).find('.form-group').removeClass('has-info').addClass('has-error');
            } else {
                $(e).closest('.form-group').removeClass('has-info').addClass('has-error');
            }


        },

        success: function (e) {
            if ($(e).is('.file-upload')) {
                $(e).parents('div').eq(1).find('.form-group').removeClass('has-error').addClass('has-info');
                $(e).parents('div').eq(1).find('.form-group .help-block').remove();
            }
            else {
                $(e).closest('.form-group').removeClass('has-error').addClass('has-info');
                $(e).closest('.form-group').find('.help-block').remove();
            }

        },

        errorPlacement: function (error, element) {

            if (element.is('input[type=checkbox]') || element.is('input[type=radio]')) {
                var controls = element.closest('div[class*="col-"]');
                if (controls.find(':checkbox,:radio').length > 1) controls.append(error);
                else error.insertAfter(element.nextAll('.lbl:eq(0)').eq(0));
            }
            else if (element.is('.select2') || element.is('.js-select2-1')) {
                if (element.parents('div').eq(0).is('.input-group')) {
                    error.insertAfter(element.parents('div').eq(0));
                } else {
                    error.insertAfter(element.siblings('[class*="select2-container"]:eq(0)'));
                }


            }
            else if (element.is('.file-upload')) {
                error.insertAfter(element.parents('div').eq(1).find('.file-caption-main'));
            }
            else if (element.is('.chosen-select')) {
                error.insertAfter(element.siblings('[class*="chosen-container"]:eq(0)'));
            }
            else error.insertAfter(element);
        },

        submitHandler: function (form) {
        },
        invalidHandler: function (form) {
        }
    });
</script>